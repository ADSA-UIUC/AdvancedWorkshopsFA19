# -*- coding: utf-8 -*-
"""Simple Linear Regression Solution.ipynb

Automatically generated by Colaboratory.

Solution file is located at
    https://colab.research.google.com/drive/1RzyTGGWXcoeR7-lcVhqmXVR-BKvfQlmJ
"""

from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = (20.0, 10.0)


class SimpleLinearRegression:
    def __init__(self):
        self.slope = 0
        self.intercept = 0

    def train(self, x, y):
        """
        Trains our model given labelled data.
        Sets values for the models slope and intercept

        Args:
            x (np.array): A 1-d array of x values
            y (np.array): A 1-d array of known y values
        """

        # TODO: Implement this function!

        # Compute coefficients
        self.slope =
        self.intercept =

    def predict(self, x):
        """
        With a trained model, predicts the y-value given x.

        Args:
            x (float): The independent variable

        Returns:
            float: The predicted (dependent) variable
        """

        # TODO: Implement this function!

        return 0

    def test(self, x_test, y_test):
        """
        Tests our model given data separate from our training data

        Args:
            x_test (np.array): A 1-d array of x values
            y_test (np.array): A 1-d array of known y values
        """
        MSE = np.sum([(self.predict(x) - y) ** 2 for x, y in zip(x_test, y_test)]) / len(x_test)
        RMSE = np.sqrt(MSE)

        R2_score = 1 - (MSE / np.var(y_test))

        return RMSE, R2_score


data = pd.read_csv("student.csv")

# Ploting the scores as scatter plot
plt.scatter(data['Reading'].values, data['Writing'].values, color='#ef1234', label='Scatter Plot')
plt.title("Reading vs. Writing Scores Data")
plt.legend()
plt.show()

train_data = data.head(700)

features = train_data['Reading'].values
targets = train_data['Writing'].values

lin_model = SimpleLinearRegression()
lin_model.train(features, targets)


# Plotting Values and Regression Line
max_x = np.max(features)
min_x = np.min(features) - 5
y_int = lin_model.intercept
slope = lin_model.slope


# Calculating line values x and y
x = np.linspace(min_x, max_x, 1000)
y = y_int + slope * x

print("Y-Intercept: {0}, Slope: {1}".format(y_int, slope))

# Ploting Line
plt.plot(x, y, color='#58b970', label='Regression Line')

# Ploting Scatter Points
plt.scatter(features, targets, c='#ef5423', label='Scatter Plot')

plt.xlabel('Reading score (%)')
plt.ylabel('Writing score(%)')
plt.legend()
plt.title("Reading vs. Writing Scores Data Simple Regression")
plt.show()

test_data = data.tail(300)

test_features = test_data['Reading'].values
test_targets = test_data['Writing'].values

rmse, R2_score = lin_model.test(test_features, test_targets)
print("Root Mean Square Error (RMSE): {0}, R^2 Score: {1}".format(rmse, R2_score))
